******************************** PIPEX_BONUS *********************************

ft_pipex_bonus(int ac, char **av, char **env)
{
		- create a pipe;
		- fork() , pass the ft_first function to the child ;
		- wait for the child to finish;
		- unlink (here_doc) if (here_doc);
		- make the pipe[0] to be stdin;
		- invoke ft_second() to handle the rest of cmds;
}


ft_first(av,  env, pipe_fd)
{

		- check for the here_doc invoke here_doc function;  here_doc(**av, *i);
			{
				- if the here_doc in the first argument;
					fd = open("here_doc)
					invoke ft_stdin_to_file(fd, av[2]);
					*i = 3 to point to the cmd;
					close fd because the offset reach the end of file we need to open it again;
				 else 
					 *i = 2; no here_doc then the cmd in av[2];
				- open (av[1]) ; read only;
				return fd;
			}
		- check the fd;
		- close (pipe_fd[0]);
		- make the stdin read from file and write to the pipe;
		- close fd;
		- ft_exec() like the mandatory;
		- exit
}

ft_second(int ac, char **av, char **env, int pipe_fd)
{
	- i = 2;
	- if (here_doc) i = 3;
	- loop from i to ac - 1
	{
		- create a pipe;
 		- fork() ; 
			- invoke ft_third(ac, (av && env), pfd, i);
		- wait for the child to write to the pipe;
		- make the pipe stdin; in each write to pipe then creat new pipe in the first instruction on the loop;
		close(pipe); 
	}
}

ft_third(ac, (av && env), pfd, i)
{
	check for the final cmd() 
		{
			if ac - 2 == i then we are in the last cmd and should write to the file not the pipe;
			close pfd[1]; that we write in in the loop;
			if here doc  open the outfile as O_APPEND
			else .. as O_TRUNC

		}
		make pfd[1] as stdout;
		close (pfd);
		ft_exec();
}
